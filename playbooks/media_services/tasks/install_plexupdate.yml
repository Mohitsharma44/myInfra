---

- name: Clone plexupdate repository
  git:
    repo: https://github.com/mrworf/plexupdate.git
    dest: "{{ plexupdate_install_location }}"
    version: "{{ plexupdate_version }}"

- name: Create desired config
  template:
    src: plexupdate/plexupdate.conf.j2
    dest: "{{ plexupdate_config_location }}"

- name: Install latest plex with plexupdate
  command: "{{ plexupdate_install_location }}/plexupdate.sh --config {{ plexupdate_config_location }}"
  environment:
    DEBIAN_FRONTEND: noninteractive
  changed_when: "'already installed' not in plexupdate_output.stdout"
  register: plexupdate_output
  notify: restart plex

- name: Reload systemD daemon
  systemd:
    name: plexmediaserver
    daemon_reload: true
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == "7") or
    (ansible_distribution == 'Ubuntu' and ansible_distribution_version|int >= 15.04) or
    (ansible_distribution == 'Debian' and ansible_distribution_major_version|int >= 8)

- name: Autostart Plex
  service:
    name: plexmediaserver
    enabled: true
  notify: restart plex

- block:
    - name: Ensure cron is installed for Redhat
      package:
        name: cronie
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Create cron config
      template:
        src: plexupdate/plexupdate.cron.conf.j2
        dest: "/etc/plexupdate.cron.conf"

    - name: Create cron job
      file:
        src: "{{ plexupdate_install_location }}/extras/cronwrapper"
        dest: "/etc/cron.{{ plexupdate_interval }}/plexupdate"
        state: link

  when: ansible_os_family != 'Alpine'

- block:
    - name: Start and enable crond
      service:
        name: crond
        state: started
        enabled: true

    - name: Create cron job
      file:
        src: "{{ plexupdate_install_location }}/extras/cronwrapper"
        dest: "/etc/periodic/{{ plexupdate_interval }}"
        state: link

  when: ansible_os_family == 'Alpine'